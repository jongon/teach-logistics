@model Tesis.Models.Group

@{
	ViewBag.Title = "Crear";
}

<div class="row wrapper border-bottom white-bg page-heading">
	<div class="col-sm-4">
		<h2>Crear</h2>
		<ol class="breadcrumb">
			<li>
				@Html.ActionLink("Índice", "Index")
			</li>
			<li class="active">
				<strong>Crear</strong>
			</li>
		</ol>
	</div>
	<div class="col-sm-8">
		<div class="title-action">
			@Html.ActionLink("Volver al Índice", "Index", null, new { @class = "btn btn-primary" })
		</div>
	</div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
	<div class="row">
		<div class="col-lg-12">
			<div class="ibox float-e-margins">
				<div class="ibox-title">
					<h5>Crear Grupo</h5>
				</div>
				<div class="ibox-content">

					@using (Html.BeginForm("Create", "Groups", FormMethod.Post, new { @class = "form-horizontal", rule = "form" }))
					{
						@Html.AntiForgeryToken()
						@Html.ValidationSummary(true, "", new { @class = "text-danger" })
						<div class="form-group">
							@Html.Label("Semestre", new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@(Html.Kendo().DropDownListFor(model => model.Section.SemesterId)
											.Name("SemesterId")
											.OptionLabel("Seleccione el semestre...")
											.DataTextField("Description")
											.DataValueField("Id")
											.DataSource(source =>
											{
												source.Read(read =>
												{
													read.Action("IndexJson", "Semesters");
												});
											})
											.Events(e => { e.Change("onSemesterChange"); })											
											.Value((ViewBag.SemesterId != null) ? ViewBag.SemesterId : "")
								)
								@Html.ValidationMessageFor(model => model.Section.SemesterId, "", new { @class = "text-danger" })
							</div>
						</div>
						<div class="hr-line-dashed"></div>

						<div class="form-group">
							@Html.LabelFor(model => model.SectionId, new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@(Html.Kendo().DropDownListFor(model => model.SectionId)
											.Name("SectionId")
											.OptionLabel("Seleccione la sección...")
											.DataTextField("Number")
											.DataValueField("Id")
											.DataSource(source =>
											{
												source.Read(read =>
												{
													read.Action("GetSectionsBySemester", "Sections")
													.Data("filterSections");
												})
												.ServerFiltering(true);
											})
											.Events(e => { e.Change("onSectionChange"); })										
											.Value((ViewBag.SectionId != null) ? ViewBag.SectionId : "")
											.Enable(false)
											.AutoBind(false)
											.CascadeFrom("SemesterId")
								)
								@Html.ValidationMessageFor(model => model.SectionId, "", new { @class = "text-danger" })
							</div>
						</div>
						<div class="hr-line-dashed"></div>

						<div class="form-group">
							@Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@Html.EditorFor(model => model.Name)
								@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
							</div>
						</div>

						<div class="hr-line-dashed"></div>
						<div class="form-group">
							@Html.Label("Integrantes", new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								@(Html.Kendo().AutoComplete()
											.Name("UserAutoComplete")
											.HtmlAttributes(new { @class = "text" })
											.DataTextField("UserName")
											.Filter("contains")
											.MinLength(3)
											.DataSource(source =>
											{
												source.Read(read =>
												{
													read.Action("GetUsersBySection", "Account").Data("onAdditionalData");
												})
												.ServerFiltering(true);
											})
											.Events(e =>
											{
												e.Select("onUserSelect").Close("onUserClose");
											})
											.Enable(false)											
								)
							</div>
						</div>
											
						<div class="hr-line-dashed"></div>
						<div class="form-group">
							@Html.LabelFor(model => model.Users, new { @class = "control-label col-md-2" })
							<div class="col-md-10">
								<div class="col-lg-4 m-l-n">
									@Html.ListBoxFor(model => model.Users, Enumerable.Empty<SelectListItem>(), new { @class = "form-control" })
								</div>
							</div>
						</div>									
						<div class="form-group">
							<div class="col-md-offset-2 col-md-10">
								<button id="deleteUser" class="btn btn-danger">Borrar Integrante</button>
							</div>
						</div>
											
						<div class="hr-line-dashed"></div>						
						<div class="form-group">
							<div class="col-md-offset-2 col-md-10">
								<input type="submit" value="Crear" class="btn btn-primary" />
								@Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-info" })
							</div>
						</div>
						}
				</div>
			</div>
		</div>
	</div>
</div>
@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
	<script>
		function filterSections() {
			return {
				SemesterId: $("#SemesterId").val()
			};
		}

		$.validator.setDefaults({
			ignore: ""
		});

		function onAdditionalData() {
			return {
				UserName: $("#UserAutoComplete").val(),
				SectionId: $("#SectionId").val()
			};
		}

		function onUserSelect(e) {
			var dataItem = this.dataItem(e.item.index());
			var UserId = dataItem.Id;
			var UserName = dataItem.UserName;
			var bool = true;

				$("#Users > option").each(function () {
					if (this.value == UserId) {
						bool = false;
						return false;
					}
				});

				if (bool == true) {
					$('#Users').append($('<option/>', {
						value: UserId,
						text: UserName
					}));
				}
				return false;
		}

		function onUserClose() {
			$('#UserAutoComplete').val('');
		}

		function onSectionChange() {
			var SectionId = $("#SectionId").val();
			if (SectionId) {
				$("#UserAutoComplete").prop('disabled', false);
			} else {
				$("#UserAutoComplete").prop('disabled', true);
			}
		}

		function onSemesterChange() {
			var SemesterId = $("#SemesterId").val();
			if (!SemesterId) {
				$("#UserAutoComplete").prop('disabled', true);
			}
		}

		function onFiltering() {
			var SectionId = $("#SectionId").val();
			if (!SectionId) {
				$("#UserAutoComplete").prop('disabled', true);
			}
		}

		$("#deleteUser").click(function(event) {
			$('#Users option:selected').each(function () {
				$(this).remove();
			});
				return false;
		}); 

		$('#Users option:selected').each(function () {
			$(this).remove();
		});

		$(document).ready(function(){
			onSectionChange();
		})
	</script>
}
