@model Tesis.ViewModels.CaseStudyViewModel

@section Styles{
	@Styles.Render("~/plugins/iCheckStyles")
	@Styles.Render("~/plugins/wizardStepsStyles")
	@Styles.Render("~/plugins/jasnyBootstrapStyles")
	@Styles.Render("~/app/CaseStudies")
}
@{
	ViewBag.Title = "Crear";
}

<div class="row wrapper border-bottom white-bg page-heading">
	<div class="col-sm-4">
		<h2>Casos de Estudio</h2>
		<ol class="breadcrumb">
			<li>
				@Html.ActionLink("Índice", "Index")
			</li>
			<li class="active">
				<strong>Crear</strong>
			</li>
		</ol>
	</div>
	<div class="col-sm-8">
		<div class="title-action">
			@Html.ActionLink("Volver al Índice", "Index", null, new { @class = "btn btn-primary" })
		</div>
	</div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
	@Html.Flash()
	<div class="row">
		<div class="col-lg-12">
			<div class="ibox">
				<div class="ibox-title">
					<h5>Crear Caso de Estudio</h5>
				</div>
				<div class="ibox-content">
					<h2>Caso de estudio</h2>
					<p>Por favor siga los pasos para crear su caso de estudio.</p>
					@using (Html.BeginForm("Create", "CaseStudies", FormMethod.Post, new { enctype = "multipart/form-data", @class = "wizard-big", role = "form", id = "form" })) {
						<h1>Elija Nombre, Semestre y sección</h1>
						@*Form para elegir la sección y semestre*@
						<fieldset>
							<h2>Elija Nombre, Semestre y sección</h2>
							<div class="hr-line-dashed"></div>
							<div class="form-horizontal">
								<div class="form-group">
								@Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @placeholder = "Nombre de caso de estudio" } })
										@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="form-group">
									@Html.LabelFor(model => model.Periods, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.Periods, new { htmlAttributes = new { @placeholder = "Número de Períodos" } })
										@Html.ValidationMessageFor(model => model.Periods, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="form-group">
									@Html.LabelFor(model => model.SemesterId, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@(Html.Kendo().DropDownListFor(model => model.SemesterId)
											.Name("SemesterId")
											.OptionLabel("Seleccione el semestre...")
											.DataTextField("Description")
											.DataValueField("Id")
											.HtmlAttributes(new { @class = "col-md-offset-0 col-xs-offset-1" })
											.DataSource(source =>
											{
												source.Read(read =>
												{
													read.Action("IndexJson", "Semesters");
												});
											})
										)
										@Html.ValidationMessageFor(model => model.SemesterId, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.SectionId, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@(Html.Kendo().DropDownListFor(model => model.SectionId)
												.Name("SectionId")
												.OptionLabel("Seleccione la sección...")
												.DataTextField("Number")
												.DataValueField("Id")
												.HtmlAttributes(new { @class = "col-md-offset-0 col-xs-offset-1" })
												.DataSource(source =>
												{
													source.Read(read =>
													{
														read.Action("GetSectionsBySemester", "Sections")
														.Data("filterSections");
													})
													.ServerFiltering(true);
												})
												.Enable(false)
												.AutoBind(false)
												.CascadeFrom("SemesterId")
										)
										@Html.ValidationMessageFor(model => model.SemesterId, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="form-group">
									<div class="col-lg-12">
										<b style="font-style: italic;">Nota:</b>
										<p style="font-style: italic;">De no seleccionar Semestre y sección posteriormente tendrá que asignar este caso de estudio a uno</p>
									</div>
								</div>
								<div class="hr-line-dashed"></div>
							</div>
						</fieldset>

						@*Form para elegir el tipo de carga de datos*@
						<h1>Tipo de Carga de Datos</h1>
						<fieldset>
							<h2>Seleccione la manera de cargar sus datos</h2>
							<div class="hr-line-dashed"></div>
							<div class="form-group">
								<div class="col-sm-10">
									@foreach (var option in (SelectList)ViewBag.ChargeTypes) {
										<div class="radio i-checks">
											<label>
												@Html.RadioButtonFor(model => model.ChargeTypeName, option.Value)
												<i></i>@option.Text
											</label>
										</div>
									}
									@Html.ValidationMessageFor(model => model.ChargeTypeName, "", new { @class = "text-danger" })
								</div>
							</div>
						</fieldset>

						@*Form para elegir el archivo XML*@
						<h1>Xml</h1>
						<fieldset>
							<h2>Cargue su archivo Xml</h2>
							<div class="hr-line-dashed"></div>
							<div class="col-lg-12">
								<div class="ibox float-e-margins">
									<div class="fileinput fileinput-new input-group" data-provides="fileinput">
										<div class="form-control" data-trigger="fileinput">
											<i class="fa fa-file fileinput-exists"></i> <span class="fileinput-filename"></span>
										</div>
										<span class="input-group-addon btn btn-default btn-file">
											<span class="fileinput-new">Seleccionar archivo</span>
											<span class="fileinput-exists">Cambiar</span>
											@Html.EditorFor(model => model.XmlUpload, new { htmlAttributes = new { @onchange = "return isXml(this)" } })
										</span>
										<a href="#" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput">Remover</a>
									</div>
									@Html.ValidationMessageFor(model => model.XmlUpload, "", new { @class = "text-danger" })
								</div>
							</div>
						</fieldset>
						
						@*Formulario de Caso de estudio*@
						<h1>Formulario de Caso de Estudio</h1>
						<fieldset>
							<h2>Formulario de Caso de estudio</h2>
							<div class="hr-line-dashed"></div>
							<div class="form-horizontal">
								<div class="form-group">
									@Html.LabelFor(model => model.PreparationCost, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.PreparationCost, new { htmlAttributes = new { @placeholder = "Costo de Preparación/Transmitir" } })
										@Html.ValidationMessageFor(model => model.PreparationCost, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.AnnualMaintenanceCost, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.AnnualMaintenanceCost, new { htmlAttributes = new { @placeholder = "Costo Anual de Mantener el Inventario" } })
										@Html.ValidationMessageFor(model => model.AnnualMaintenanceCost, "", new { @class = "text-danger" })
									</div>
								</div>

								<div class="hr-line-dashed"></div>
								<div class="form-group">
									@Html.LabelFor(model => model.PurchaseOrderRecharge, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.PurchaseOrderRecharge, new { htmlAttributes = new { @placeholder = "Recargo por orden de compra" } })
										@Html.ValidationMessageFor(model => model.PurchaseOrderRecharge, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.CourierCharges, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.CourierCharges, new { htmlAttributes = new { @placeholder = "Recargo por uso de courier" } })
										@Html.ValidationMessageFor(model => model.CourierCharges, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.PreparationTime, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.PreparationTime, new { htmlAttributes = new { @placeholder = "Tiempo de Preparación" } })
										@Html.ValidationMessageFor(model => model.PreparationTime, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.AcceleratedPreparationTime, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.AcceleratedPreparationTime, new { htmlAttributes = new { @placeholder = "Tiempo de Preparación acelerado" } })
										@Html.ValidationMessageFor(model => model.AcceleratedPreparationTime, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.FillTime, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.FillTime, new { htmlAttributes = new { @placeholder = "Tiempo de Surtir Pedido" } })
										@Html.ValidationMessageFor(model => model.FillTime, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.ExistingFillTime, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.ExistingFillTime, new { htmlAttributes = new { @placeholder = "Tiempo de Surtir Pedido en existencia" } })
										@Html.ValidationMessageFor(model => model.ExistingFillTime, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.DeliveryTime, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.DeliveryTime, new { htmlAttributes = new { @placeholder = "Tiempo de Entrega" } })
										@Html.ValidationMessageFor(model => model.DeliveryTime, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.CourierDeliveryTime, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.CourierDeliveryTime, new { htmlAttributes = new { @placeholder = "Tiempo de Entrega con uso de courier" } })
										@Html.ValidationMessageFor(model => model.CourierDeliveryTime, "", new { @class = "text-danger" })
									</div>
								</div>
							</div>
						</fieldset>					
						@*Formulario de carga*@
						<h1>Formulario de Carga</h1>
						<fieldset>
							<div style="display: none" id="alert" class="alert alert-success">
								<button type="button" class="close" data-dismiss="alert">×</button>
								<strong>La carga inicial del producto se han agregado correctamente!, continúe...</strong>
							</div>
							<h2>Formulario de Carga Inicial</h2>
							<div class="hr-line-dashed"></div>
							<div class="form-horizontal">
								<div class="form-group">
									@Html.LabelFor(model => model.ProductId, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.DropDownListFor(model => model.ProductId, (SelectList)ViewBag.Products, "Elija un producto", new { @class = "form-control single-line" })
										@Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.Demand, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.Demand, new { htmlAttributes = new { @placeholder = "Demanda" } })
										@Html.ValidationMessageFor(model => model.Demand, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.Stddev, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.Stddev, new { htmlAttributes = new { @placeholder = "Desviación estandar" } })
										@Html.ValidationMessageFor(model => model.Stddev, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.Price, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.Price, new { htmlAttributes = new { @placeholder = "Precio" } })
										@Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.SecurityStock, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.SecurityStock, new { htmlAttributes = new { @placeholder = "Inventario de Seguridad" } })
										@Html.ValidationMessageFor(model => model.SecurityStock, "", new { @class = "text-danger" })
									</div>
								</div>
								<div class="hr-line-dashed"></div>

								<div class="form-group">
									@Html.LabelFor(model => model.InitialStock, new { @class = "control-label col-md-2" })
									<div class="col-md-10">
										@Html.EditorFor(model => model.InitialStock, new { htmlAttributes = new { @placeholder = "Inventario Inicial" } })
										@Html.ValidationMessageFor(model => model.InitialStock, "", new { @class = "text-danger" })
									</div>
								</div>
							</div>
						</fieldset>
						@Html.EditorFor(model => model.InitialCharges)									
					 }
				</div>
			</div>
		</div>
	</div>
</div>
@section Scripts {
	@Scripts.Render("~/plugins/wizardSteps")
	@Scripts.Render("~/plugins/iCheck")
	@Scripts.Render("~/plugins/jasnyBootstrap")
	@Scripts.Render("~/bundles/CaseStudies/create")
}
